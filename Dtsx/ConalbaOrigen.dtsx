<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/28/2024 11:54:16 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-PJEIDUL"
  DTS:CreatorName="DESKTOP-PJEIDUL\Leonardo Mancero"
  DTS:DTSID="{C5ECAD1F-485A-43D3-AC9F-8B7580C2D69F}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.0"
  DTS:LocaleID="12298"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="146"
  DTS:VersionGUID="{294C8D6E-FD5D-43DA-B12F-5B01D71F228B}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{93EB8763-83D6-4614-9DCA-0E7F200B9B6E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="conexionDestino">
      <DTS:VariableValue
        DTS:DataType="8">Server=192.168.1.100;Database=SEICOII;User Id=Integrity;Password=conalBa0608;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F5970596-9505-45EA-A6AF-2E6F85FD6866}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="conexionOrigen">
      <DTS:VariableValue
        DTS:DataType="8">Server=192.168.1.100;Database=SEICOII;User Id=Integrity;Password=conalBa0608;</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Transferencia de Datos"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{5BAAEFA1-60F3-4DE3-9FB3-AA7AE45CDE73}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Transferencia de Datos"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_d3ccaf3431b242539c8b716f26511831"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadWriteVariables="User::conexionDestino,User::conexionOrigen">
          <ProjectItem
            Name="Models\Request.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_d3ccaf3431b242539c8b716f26511831.Models
{
    public class Request
    {
        public string tabla { get; set; }
        public List<string> columnas { get; set; }
        public List<object> valor { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_d3ccaf3431b242539c8b716f26511831.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{6DEBB0CA-D366-45DF-807B-F7B6E42E2F10}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_d3ccaf3431b242539c8b716f26511831</RootNamespace>
    <AssemblyName>ST_d3ccaf3431b242539c8b716f26511831</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <HintPath>C:\Users\isc_2\AppData\Local\Temp\Vsta\SSIS_ST160\VstaHuJIOF4T5UqSqx7HMqY__w\packages\Newtonsoft.Json.13.0.3\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Models\Request.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Utils\stringHandler.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Entidades\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="13.0.3" targetFramework="net47" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3ccaf3431b242539c8b716f26511831.Properties.Settings.get_Default():ST_d3ccaf3431b242539c8b716f26511831.Properties.Sett" +
    "ings")]

namespace ST_d3ccaf3431b242539c8b716f26511831.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using ST_d3ccaf3431b242539c8b716f26511831.Utils;
using Newtonsoft.Json;
using System.Collections;
using ST_d3ccaf3431b242539c8b716f26511831.Models;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using System.Linq;
using static System.Net.Mime.MediaTypeNames;
#endregion

namespace ST_d3ccaf3431b242539c8b716f26511831
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        public string conexionOrigen { get; set; }
        public string conexionDestino { get; set; }

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {

            conexionOrigen = Dts.Variables["User::conexionOrigen"].Value.ToString();
            conexionDestino = Dts.Variables["User::conexionDestino"].Value.ToString();

            #region CODIGO1
            var consulta = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo1);
            if (consulta.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta.Tables.Count; i++)
                {
                    //InsertTables(consulta.Tables[i], stringHandler.accionRegistro.Trim());
                    InsertTablesV2000(consulta.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta = null;


            var consultaUp = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo1, stringHandler.DestinoUpdate);
            if (consultaUp.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo1);
                }
            }

            consultaUp = null;
            #endregion
            #region CODIGO2
            var consulta2 = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo2);
            if (consulta2.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta2.Tables.Count; i++)
                {
                    InsertTablesV2000(consulta2.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta2 = null;

            var consultaUp2 = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo1, stringHandler.DestinoUpdate);
            if (consultaUp2.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp2.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp2.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo1);                   
                }
            }
            consultaUp2 = null;
            #endregion
            #region CODIGO3
            var consulta3 = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo3);
            if (consulta3.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta3.Tables.Count; i++)
                {
                    InsertTablesV2000(consulta3.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta3 = null;

            var consultaUp3 = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo1, stringHandler.DestinoUpdate);
            if (consultaUp3.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp3.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp3.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo1);
                }
            }
            consultaUp3 = null;

            #endregion
            #region CODIGO4
            var consulta4 = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo4);
            if (consulta4.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta4.Tables.Count; i++)
                {
                    InsertTablesV2000(consulta4.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta4 = null;

            var consultaUp4 = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo1, stringHandler.DestinoUpdate);
            if (consultaUp4.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp4.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp4.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo1);
                }
            }
            consultaUp4 = null;

            #endregion
            #region CODIGO5
            var consulta5 = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo5);
            if (consulta5.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta5.Tables.Count; i++)
                {
                    InsertTablesV2000(consulta5.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta5 = null;

            var consultaUp5 = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo1, stringHandler.DestinoUpdate);
            if (consultaUp5.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp5.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp5.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo1);
                }
            }
            consultaUp5 = null;
            #endregion
        }

        public static string DataRowToJson(DataRow dataRow)
        {
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            foreach (DataColumn column in dataRow.Table.Columns)
            {
                dict[column.ColumnName] = dataRow[column];
            }

            return JsonConvert.SerializeObject(dict);
        }

        private void InsertTables(DataTable dt, string tipo)
        {
            try
            {
                if (dt.Rows.Count > 0)
                {
                    var jsonText = string.Empty;
                    List<Request> datosResponse = new List<Request>();

                    foreach (DataRow row in dt.Rows)
                    {
                        jsonText += row[0].ToString();
                    }

                    JArray jsonObject = JArray.Parse(jsonText);
                    var tabla = jsonObject[0];
                    var nombreTable = string.Empty;
                    nombreTable = tabla["tabla"].ToString();
                    nombreTable = nombreTable + "_PRUEBA";
                    var ArrayList = JArray.Parse(tabla["datos"].ToString());


                    foreach (var item in ArrayList)
                    {
                        var jsonSerializado = JsonConvert.SerializeObject(item);

                        var sinSegmento = 0;
                        string segmento = nombreTable.ToString();
                        var nombreSP = "";
                        segmento = segmento.Substring(0, 2).Trim();

                        switch (segmento)
                        {
                            case "FA":
                                nombreSP = stringHandler.sp_RegistroMigracionFa;
                                break;
                            case "CB":
                                Console.WriteLine("CB");
                                break;

                            default:
                                sinSegmento = 1;
                                break;
                        }

                        if (sinSegmento == 1)
                        {
                            continue;
                        }

                        SqlDataAdapter ad = new SqlDataAdapter();
                        DataSet ds = new DataSet();
                        SqlConnection Conexion = new SqlConnection(conexionDestino);
                        SqlCommand cmd = new SqlCommand();
                        Conexion.Open();
                        cmd.Connection = Conexion;
                        cmd.CommandText = nombreSP;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@accion", tipo));
                        cmd.Parameters.Add(new SqlParameter("@nombreTable", nombreTable));
                        cmd.Parameters.Add(new SqlParameter("@json", jsonSerializado));
                        ad = new SqlDataAdapter(cmd);
                        ad.Fill(ds);
                        Conexion.Close();
                    }

                }

            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message.ToString());
            }
        }


        private void InsertTablesV2000(DataTable dt, string accion)
        {
            try
            {
                if (dt.Rows.Count > 0)
                {
                    var jsonText = string.Empty;
                    List<Request> datosResponse = new List<Request>();

                    foreach (DataRow row in dt.Rows)
                    {
                        jsonText += row[0].ToString();
                    }

                    JArray jsonObject = JArray.Parse(jsonText);
                    var tabla = jsonObject[0];
                    var nombreTable = string.Empty;
                    var nombreTableI = string.Empty;
                    nombreTable = tabla["tabla"].ToString();
                    nombreTableI = nombreTable + "_PRUEBA";
                    var ArrayList = JArray.Parse(tabla["datos"].ToString());



                    foreach (var item in ArrayList)
                    {
                        string columnas = string.Empty;
                        string valor = string.Empty;

                        var jsonSerializado = JsonConvert.SerializeObject(item);
                        var des = JsonConvert.DeserializeObject<Dictionary<string, string>>(jsonSerializado);
                        foreach (var item1 in des.Keys)
                        {
                            columnas += $"{item1},";
                        }


                        foreach (var item2 in des.Values)
                        {
                            valor += $"'{item2}',";

                        }

                        var sinSegmento = 0;
                        string segmento = nombreTable.ToString();
                        var nombreSP = "";
                        segmento = segmento.Substring(0, 2).Trim();

                        switch (segmento)
                        {
                            case "FA":
                                nombreSP = stringHandler.sp_RegistroMigraOldFa;
                                break;
                            case "CB":
                                Console.WriteLine("CB");
                                break;

                            default:
                                sinSegmento = 1;
                                break;
                        }

                        if (sinSegmento == 1)
                        {
                            continue;
                        }


                        SqlDataAdapter ad = new SqlDataAdapter();
                        DataSet ds = new DataSet();
                        SqlConnection Conexion = new SqlConnection(conexionDestino);
                        SqlCommand cmd = new SqlCommand();
                        Conexion.Open();
                        cmd.Connection = Conexion;
                        cmd.CommandText = nombreSP;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@accion", accion));
                        cmd.Parameters.Add(new SqlParameter("@nombreTable", nombreTableI));
                        cmd.Parameters.Add(new SqlParameter("@columnas", columnas.Remove(columnas.Length - 1)));
                        cmd.Parameters.Add(new SqlParameter("@valores", valor.Remove(valor.Length - 1)));
                        ad = new SqlDataAdapter(cmd);
                        ad.Fill(ds);
                        Conexion.Close();
                    }

                    UpdateTableMigracion(accion, nombreTable);
                }

            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message.ToString());
            }

        }

        private void UpdateTablesV2000(DataTable dt, string accion, string codigoTipo)
        {

            try
            {
                if (dt.Rows.Count > 0)
                {
                    var jsonText = string.Empty;
                    List<Request> datosResponse = new List<Request>();

                    foreach (DataRow row in dt.Rows)
                    {
                        jsonText += row[0].ToString();
                    }

                    JArray jsonObject = JArray.Parse(jsonText);
                    var tabla = jsonObject[0];
                    var nombreTable = string.Empty;
                    var nombreTableI = string.Empty;
                    nombreTable = tabla["tabla"].ToString();
                    nombreTableI = nombreTable + "_PRUEBA";
                    var ArrayList = JArray.Parse(tabla["datos"].ToString());
                    var ArrayListFiltros = JArray.Parse(tabla["filtros"].ToString());
                    var a = JsonConvert.SerializeObject(tabla);



                    int cont = 0;
                    foreach (var filtro in ArrayListFiltros)
                    {
                        var item = ArrayList[cont];


                        int sinSegmento = 0;
                        string segmento = nombreTable.ToString();
                        string nombreSP = string.Empty;
                        segmento = segmento.Substring(0, 2).Trim();

                        switch (segmento)
                        {
                            case "FA":
                                nombreSP = stringHandler.sp_RegistroMigraOldFa;
                                break;
                            case "CB":
                                Console.WriteLine("CB");
                                break;

                            default:
                                sinSegmento = 1;
                                break;
                        }

                        if (sinSegmento == 1)
                        {
                            continue;
                        }


                        SqlDataAdapter ad = new SqlDataAdapter();
                        DataSet ds = new DataSet();
                        SqlConnection Conexion = new SqlConnection(conexionDestino);
                        SqlCommand cmd = new SqlCommand();
                        Conexion.Open();
                        cmd.Connection = Conexion;
                        cmd.CommandText = nombreSP;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@accion", accion));
                        cmd.Parameters.Add(new SqlParameter("@nombreTable", nombreTableI));
                        cmd.Parameters.Add(new SqlParameter("@columnas", item.ToString()));
                        cmd.Parameters.Add(new SqlParameter("@valores", filtro.ToString()));
                        ad = new SqlDataAdapter(cmd);
                        ad.Fill(ds);
                        Conexion.Close();
                        cont++;
                    }
                    UpdateTableMigracion(accion, nombreTable);
                }

            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message.ToString());
            }



            #region OLD
            //try
            //{
            //    //if (dt.Rows.Count > 0)
            //    //{
            //    //    var jsonText = string.Empty;
            //    //    List<Request> datosResponse = new List<Request>();

            //    //    foreach (DataRow row in dt.Rows)
            //    //    {
            //    //        jsonText += row[0].ToString();
            //    //    }

            //    //    JArray jsonObject = JArray.Parse(jsonText);
            //    //    var tabla = jsonObject[0];
            //    //    var nombreTable = string.Empty;
            //    //    nombreTable = tabla["tabla"].ToString();
            //    //    nombreTable = nombreTable + "_PRUEBA";
            //    //    var ArrayList = JArray.Parse(tabla["datos"].ToString());


            //    //    var dtR = consultarRegistros(accion, codigoTipo);
            //    //    string[] valorSplit = { };
            //    //    foreach (DataRow itemR in dtR.Tables[0].Rows)
            //    //    {
            //    //        var obs = itemR["observacion"].ToString();
            //    //        valorSplit = obs.Split(',');
            //    //    }


            //    //    foreach (var item in ArrayList)
            //    //    {
            //    //        string columnas = string.Empty;
            //    //        string valor = string.Empty;

            //    //        var jsonSerializado = JsonConvert.SerializeObject(item);

            //    //        foreach (string itemSplit in valorSplit)
            //    //        {
            //    //            JObject jsonObj = JObject.Parse(jsonSerializado);
            //    //            jsonObj.Remove(itemSplit.ToString());

            //    //        }

            //    //        //var des = JsonConvert.DeserializeObject<Dictionary<string, string>>(jsonSerializado);
            //    //        //        foreach (var item1 in des.Keys)
            //    //        //        {
            //    //        //            columnas += $"{item1},";
            //    //        //        }


            //    //        //        foreach (var item2 in des.Values)
            //    //        //        {
            //    //        //            valor += $"'{item2}',";

            //    //        //        }

            //    //        //        var sinSegmento = 0;
            //    //        //        string segmento = nombreTable.ToString();
            //    //        //        var nombreSP = "";
            //    //        //        segmento = segmento.Substring(0, 2).Trim();

            //    //        //        switch (segmento)
            //    //        //        {
            //    //        //            case "FA":
            //    //        //                nombreSP = stringHandler.sp_RegistroMigraOldFa;
            //    //        //                break;
            //    //        //            case "CB":
            //    //        //                Console.WriteLine("CB");
            //    //        //                break;

            //    //        //            default:
            //    //        //                sinSegmento = 1;
            //    //        //                break;
            //    //        //        }

            //    //        //        if (sinSegmento == 1)
            //    //        //        {
            //    //        //            continue;
            //    //        //        }


            //    //        //        SqlDataAdapter ad = new SqlDataAdapter();
            //    //        //        DataSet ds = new DataSet();
            //    //        //        SqlConnection Conexion = new SqlConnection(conexionDestino);
            //    //        //        SqlCommand cmd = new SqlCommand();
            //    //        //        Conexion.Open();
            //    //        //        cmd.Connection = Conexion;
            //    //        //        cmd.CommandText = nombreSP;
            //    //        //        cmd.CommandType = CommandType.StoredProcedure;
            //    //        //        cmd.Parameters.Add(new SqlParameter("@accion", accion));
            //    //        //        cmd.Parameters.Add(new SqlParameter("@nombreTable", nombreTable));
            //    //        //        cmd.Parameters.Add(new SqlParameter("@valores", valor.Remove(valor.Length - 1)));
            //    //        //        ad = new SqlDataAdapter(cmd);
            //    //        //        ad.Fill(ds);
            //    //        //        Conexion.Close();
            //    //    }


            //    //}

            //}
            //catch (Exception ex)
            //{

            //    throw new Exception(ex.Message.ToString());
            //}

            #endregion OLD
        }


        private DataSet consultar(string tipo, string accion)
        {
            DataTable dt = new DataTable();
            SqlDataAdapter ad = new SqlDataAdapter();
            DataSet ds = new DataSet();
            try
            {
                SqlConnection Conexion = new SqlConnection(conexionOrigen);
                SqlCommand cmd = new SqlCommand();
                Conexion.Open();
                cmd.Connection = Conexion;
                cmd.CommandText = stringHandler.sp_MigracionCodigo;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@accion", accion));
                cmd.Parameters.Add(new SqlParameter("@tipoU", tipo));
                ad = new SqlDataAdapter(cmd);
                ad.Fill(ds);
                Conexion.Close();
                return ds;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message.ToString());
            }
        }

        private DataSet consultarRegistros(string accion, string codigoTipo, string tipo)
        {
            DataTable dt = new DataTable();
            SqlDataAdapter ad = new SqlDataAdapter();
            DataSet ds = new DataSet();

            try
            {
                SqlConnection Conexion = new SqlConnection(conexionOrigen);
                SqlCommand cmd = new SqlCommand();
                Conexion.Open();
                cmd.Connection = Conexion;
                cmd.CommandText = stringHandler.sp_MigracionCodigo;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@accion", accion));
                cmd.Parameters.Add(new SqlParameter("@codigoTipo", codigoTipo));
                cmd.Parameters.Add(new SqlParameter("@tipoU", tipo));
                ad = new SqlDataAdapter(cmd);
                ad.Fill(ds);
                Conexion.Close();
                return ds;
            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message.ToString());
            }
        }

        private void UpdateTableMigracion( string tipo, string nombreTabla)
        {
            try
            {
                DataTable dt = new DataTable();
                SqlDataAdapter ad = new SqlDataAdapter();
                DataSet ds = new DataSet();
                try
                {
                    SqlConnection Conexion = new SqlConnection(conexionOrigen);
                    SqlCommand cmd = new SqlCommand();
                    Conexion.Open();
                    cmd.Connection = Conexion;
                    cmd.CommandText = stringHandler.sp_MigracionCodigo;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("@accion", stringHandler.accionModificaMigracion.Trim()));
                    cmd.Parameters.Add(new SqlParameter("@tipoU", tipo.Trim()));
                    cmd.Parameters.Add(new SqlParameter("@nombreTableU", nombreTabla.Trim()));
                    ad = new SqlDataAdapter(cmd);
                    ad.Fill(ds);
                    Conexion.Close();
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message.ToString());
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3ccaf3431b242539c8b716f26511831.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3ccaf3431b242539c8b716f26511831.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3ccaf3431b242539c8b716f26511831.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_d3ccaf3431b242539c8b716f26511831.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_d3ccaf3431b242539c8b716f26511831.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_d3ccaf3431b242539c8b716f26511831</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_d3ccaf3431b242539c8b716f26511831</msb:DisplayName>
    <msb:ProjectId>{E68DC9F7-BAC2-4250-A29E-6C507C2437FE}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_d3ccaf3431b242539c8b716f26511831.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Models\Request.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Utils\stringHandler.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="packages.config" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="351fad3b93c6496fa816619095daf219">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>13</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>111</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="26d5aab0d47c409280fa03d4cd274419">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>400</msb:LineNumber>
      <msb:ColumnNumber>21</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="19c8dc7c0763470ab096bed3e12156e4">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>487</msb:LineNumber>
      <msb:ColumnNumber>21</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="74fe28b0493c4747aa389ba293d63d6b">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>13</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>136</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="3448e6d170e34a038b982a28eaa9e951">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>13</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>204</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="73d07ba8ace64a0f9616f0576cf378d5">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>13</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>181</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="154fa5c65e304a95bb38a82649b603f3">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>13</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>158</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_d3ccaf3431b242539c8b716f26511831")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_d3ccaf3431b242539c8b716f26511831")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Utils\stringHandler.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace ST_d3ccaf3431b242539c8b716f26511831.Utils
{
    public static class stringHandler
    {
        internal static string sp_MigracionCodigo = "sp_MigracionCodigo";
        internal static string sp_RegistroMigracionFa = "sp_RegistroMigracionFa";
        internal static string sp_RegistroMigraOldFa = "sp_RegistroMigraOldFa";
        internal static string accionCodigo1 = "1";
        internal static string accionCodigo2 = "2";
        internal static string accionCodigo3 = "3";
        internal static string accionCodigo4 = "4";
        internal static string accionCodigo5 = "5";
        internal static string accionRegistro = "I";
        internal static string accionModificaMigracion = "U";     
        internal static string DestinoUpdate = "U";     
        internal static string accionTipo = "UC";     

    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_d3ccaf3431b242539c8b716f26511831.dll">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
AAIoUQAACm9SAAAKc1MAAAqAAwAABH4DAAAEKhp+BAAABCoeAoAEAAAEKhp+BQAABCoeAihUAAAK
Ki5zEwAABoAFAAAEKgAAEzABAHkAAAAAAAAAcrsBAHCABgAABHLhAQBwgAcAAARyDwIAcIAIAAAE
cjsCAHCACQAABHI/AgBwgAoAAARyQwIAcIALAAAEckcCAHCADAAABHJLAgBwgA0AAARyTwIAcIAO
AAAEclMCAHCADwAABHJTAgBwgBAAAARyVwIAcIARAAAEKh4CexIAAAQqIgIDfRIAAAQqHgJ7EwAA
BCoiAgN9EwAABCoeAnsUAAAEKiICA30UAAAEKkJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAA
AAUAbAAAAAQJAAAjfgAAcAkAANQLAAAjU3RyaW5ncwAAAABEFQAAYAIAACNVUwCkFwAAEAAAACNH
VUlEAAAAtBcAANgDAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+gEzABYAAAEAAAA/AAAABwAA
ABcAAAAcAAAAFQAAAFQAAAACAAAAHwAAAAcAAAAEAAAACAAAAA4AAAAIAAAAAQAAAAcAAAABAAAA
AQAAAAEAAAAAANgFAQAAAAAABgBsBPcIBgD7BPcIBgC4A+QIDwBrCQAABgDlA9oGBgBPBNoGBgAw
BNoGBgDiBNoGBgCMBNoGBgClBNoGBgD8A9oGBgAXBDAFCgDABIcFCgD6AocFBgCAA/cIDgAbCy4B
EgBFC88JFgDxCYACDgCbCy4BBgBsAEMBBgARCxcGBgCjCIoKDgBxBi4BBgA5AhcGDgAmAi4BBgBJ
AEMBGgBaBjIIDgB4By8LBgCGBxcGUwBOBwAAewCyCAAAUwAABwAAgwCyCAAAGgCrCzIIBgAjBhcG
BgCbA+QIBgBVCBcJBgDBB8UGFgBrA8IFFgDMA8IFFgAxA7AGBgBXAEMBCgCwBYcFHgDFCZACHgAw
ApACBgBMBRcGDgDsBi4BDgAWAy4BDgAQBy4BGgBuC6MHDgA8By4BBgBpAhcGDgCACC8LDgD1AS8L
DgBrB5AHDgDrAZAHDgC+Ai4BDgAlBy8LDgBzCC8LDgCDCJAHBgDFAhcGBgBFAhcGBgC2C9oGAAAA
ALEAAAAAAAEAAQABABAAZgYlADkAAQABAAAAEAAeCXoJVQADAA4AAAEQAAsKegmlAAUAEgCBARAA
ZQg/ClUABgAVAAEAEAB6CxQKVQASABYAAwEAAM8KAACNABUAHQABAHkBxAABAJkBxAARACgGXgIR
AOoCYwIRAAACaAITAM0HxAATAPcAxAATAOEAxAATAF4AxAATAHkAxAATAIcAxAATAJUAxAATAKMA
xAATACMIxAATAHwGxAATAF0DxAATAAgIxAABAGIBxAABANEBbAIBALoBdAIGBtkAfAJWgL8KfwJW
gMoCfwJQIAAAAACGCDQGVAABAFggAAAAAIYIRwYQAAEAYSAAAAAAhgjgB1QAAgBpIAAAAACGCPQH
EAACAHQgAAAAAIYAbAYGAAMAjCQAAAAAlgCzB4MCAwAEJQAAAACBALQJiQIEAEgnAAAAAIEAEwCJ
AgYAnCoAAAAAgQABAJACCABELQAAAACBAEcImAILAPgtAAAAAIEAnQqfAg0AxC4AAAAAgQCUBqcC
EACwLwAAAACGGL0IBgASALgvAAAAAIMYvQgGABIAwC8AAAAAkwhRCK0CEgDsLwAAAACTCNICswIS
APMvAAAAAJMI3gK5AhIA+y8AAAAAlggjC8ACEwACMAAAAACGGL0IBgATAAowAAAAAJEYwwjFAhMA
GDAAAAAAkRjDCMUCEwCdMAAAAACGCBoBVAATAKUwAAAAAIYIJAEQABMArjAAAAAAhgjKCMkCFAC2
MAAAAACGCNcI0gIUAL8wAAAAAIYIjwjcAhUAxzAAAAAAhgiZCOUCFQC4LwAAAACGGL0IBgAWAAAA
AQAjBQAAAQAjBQAAAQCjCwAAAQAYCwAAAgAeCAAAAQAYCwAAAgCpBgAAAQAYCwAAAgCpBgAAAwAT
CAAAAQAeCAAAAgCpBgAAAQCpBgAAAgATCAAAAwAeCAAAAQAeCAAAAgAOAQAAAQAjBQAAAQAjBQAA
AQAjBQAAAQAjBQkAvQgBABEAvQgGABkAvQgKACkAvQgQADEAvQgQADkAvQgQAEEAvQgQAEkAvQgQ
AFEAvQgQAFkAvQgQAGEAvQgQAGkAvQgGAHkAvQgGACEBvQgGAEEBvQgVAHEAxwo9AFkBwQlDAGEB
BQZJAGkBGQVQAKkASgVUAHEBHgZUAIEAqQlYAIEBZAteAHkBBQZiAAwAvQgGAJkAHAJ+AMkAfgqD
AIEBrwiJALEAWAtQALkAcQJUAJkABQaOAAwADgaUALEAggucAMEATwMGAJEB9gqgAMkA3Qq+AHEB
ywvEABQAvQgGAJkABQbPAHEB7wrUABEBVwPaABEBBQbhANkABQbnABEBrwjtABwAWAv9AHEBUwUC
AXEBvwsIAaEBsAIOAakBvQgGAIEAvQgGAOEAvQgQALEBvQgGALkBYQYGALEBXAcTAcEBiwsQAMEB
ugIZAbEBsAogAdkBvQgmAdEBXgEsAakBvQg1AeEBAAY8AbkBSQMGAOkAEAJUAOkAvQgQAJEBBgty
ASQA5gqJASwArwibATQAWAv9AHEB7wqtATQAggucACQAAAq0ATwArwjIAUQAWAvcAXEB7wrhAUQA
ggucAHEBXQVeAHEBKQXpAckAvQgGAHEAvQgGAKkAvQgGAOkBVwIiAukBsgsrAikBvQgxAkkBvQgG
AAgAWABUAggAXABZAiAAawBZAiEAawBZAi4ACwAWAy4AEwAfAy4AGwA+Ay4AIwBHAy4AKwBwAy4A
MwBwAy4AOwBwAy4AQwBHAy4ASwB2Ay4AUwBwAy4AWwCNA0AAawBZAkEAawBZAkMAYwBZAmAAawBZ
AmMAcwBZAmkAewA+A4AAawBZAokAewA+A6EAawBZAkECawBZAmECawBZAoECawBZAsACawBZAuAC
awBZAgADawBZAiADawBZAkADawBZAmADawBZAhwAaAClAEIB7gESAhsCAgABAAMAAwAEAAUABgAG
AAAASwbvAgAA+AfvAgAAVQjzAgAA8gL5AgAAJwv/AgAAKAHvAgAA2wgEAwAAnQgNAwIAAQADAAEA
AgADAAIAAwAFAAEABAAFAAIADwAHAAIAEAAJAAEAEQAJAAIAEgALAAIAFgANAAEAFwANAAIAGAAP
AAEAGQAPAAIAGgARAAEAGwARAHcAxwD2AIIBlAGmAcAB1AEEgAAAAQAAAHkjMH4AAAAAAAAlAAAA
BAAAAAAAAAAAAAAAOQI6AQAAAAAQAAAAAAAAAAAAAABCAmgFAAAAAAQAAAAAAAAAAAAAADkCLgEA
AAAABAAAAAAAAAAAAAAAOQJpCgAAAAAEAAAAAAAAAAAAAAA5AhcGAAAAAA0AAAAAAAAAAAAAAEsC
owcAAAAAEAAAAAAAAAAAAAAAQgK6AAAAAAAAAAAAAQAAACgJAAAHAAIAgwB5AQAAAAAAVXBkYXRl
VGFibGVzVjIwMDAASW5zZXJ0VGFibGVzVjIwMDAAU1RfZDNjY2FmMzQzMWIyNDI1MzljOGI3MTZm
MjY1MTE4MzEASUVudW1lcmF0b3JgMQBMaXN0YDEAYWNjaW9uQ29kaWdvMQBEaWN0aW9uYXJ5YDIA
YWNjaW9uQ29kaWdvMgBhY2Npb25Db2RpZ28zAGFjY2lvbkNvZGlnbzQAYWNjaW9uQ29kaWdvNQA8
TW9kdWxlPgBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBzcF9SZWdpc3Ry
b01pZ3JhT2xkRmEAc3BfUmVnaXN0cm9NaWdyYWNpb25GYQBub21icmVUYWJsYQBnZXRfdGFibGEA
c2V0X3RhYmxhAFN5c3RlbS5EYXRhAG1zY29ybGliAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmlj
AEFkZAA8dGFibGE+a19fQmFja2luZ0ZpZWxkADxjb25leGlvbk9yaWdlbj5rX19CYWNraW5nRmll
bGQAPGNvbmV4aW9uRGVzdGlubz5rX19CYWNraW5nRmllbGQAPHZhbG9yPmtfX0JhY2tpbmdGaWVs
ZAA8Y29sdW1uYXM+a19fQmFja2luZ0ZpZWxkAERiQ29tbWFuZABTcWxDb21tYW5kAGRlZmF1bHRJ
bnN0YW5jZQBnZXRfTWVzc2FnZQBnZXRfVGFibGUARGF0YVRhYmxlAFZhcmlhYmxlAElEaXNwb3Nh
YmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAENvbnNvbGUAZ2V0X0NvbHVt
bk5hbWUAU3lzdGVtLk5ldC5NaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAV3Jp
dGVMaW5lAHNldF9Db21tYW5kVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJl
c291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29s
bGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBQYXJzZQBE
ZXN0aW5vVXBkYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmli
dXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0
b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRl
bWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0
aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxh
eGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmln
aHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29t
cGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAdmFs
dWUAUmVtb3ZlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAU3Vic3RyaW5nAGdl
dF9MZW5ndGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVu
dE1vZGVsAFNUX2QzY2NhZjM0MzFiMjQyNTM5YzhiNzE2ZjI2NTExODMxLmRsbABGaWxsAGdldF9J
dGVtAHNldF9JdGVtAFN5c3RlbQBUcmltAEVudW0AcmVzb3VyY2VNYW4AZ2V0X2NvbmV4aW9uT3Jp
Z2VuAHNldF9jb25leGlvbk9yaWdlbgBKVG9rZW4AT3BlbgBTY3JpcHRNYWluAERhdGFDb2x1bW4A
YWNjaW9uTW9kaWZpY2FNaWdyYWNpb24AVXBkYXRlVGFibGVNaWdyYWNpb24AYWNjaW9uAFN5c3Rl
bS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAERh
dGFUYWJsZUNvbGxlY3Rpb24AVmFsdWVDb2xsZWN0aW9uAERhdGFDb2x1bW5Db2xsZWN0aW9uAFNx
bFBhcmFtZXRlckNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AS2V5Q29sbGVjdGlvbgBzZXRf
Q29ubmVjdGlvbgBEYkNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBFeGNlcHRpb24AU3lzdGVtLkRh
dGEuQ29tbW9uAE5ld3RvbnNvZnQuSnNvbgBEYXRhUm93VG9Kc29uAEN1bHR1cmVJbmZvAHNwX01p
Z3JhY2lvbkNvZGlnbwBnZXRfY29uZXhpb25EZXN0aW5vAHNldF9jb25leGlvbkRlc3Rpbm8AYWNj
aW9uVGlwbwBjb2RpZ29UaXBvAHRpcG8AYWNjaW9uUmVnaXN0cm8ATmV3dG9uc29mdC5Kc29uLkxp
bnEAY29uc3VsdGFyAGdldF9SZXNvdXJjZU1hbmFnZXIAc3RyaW5nSGFuZGxlcgBTcWxQYXJhbWV0
ZXIAU3FsRGF0YUFkYXB0ZXIAZ2V0X3ZhbG9yAHNldF92YWxvcgBJRW51bWVyYXRvcgBHZXRFbnVt
ZXJhdG9yAC5jdG9yAC5jY3RvcgBnZXRfY29sdW1uYXMAc2V0X2NvbHVtbmFzAFN5c3RlbS5EaWFn
bm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMA
U1RfZDNjY2FmMzQzMWIyNDI1MzljOGI3MTZmMjY1MTE4MzEuUHJvcGVydGllcy5SZXNvdXJjZXMu
cmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2QzY2NhZjM0MzFiMjQyNTM5YzhiNzE2ZjI2NTEx
ODMxLlByb3BlcnRpZXMAZ2V0X1RhYmxlcwBJbnNlcnRUYWJsZXMAZ2V0X1ZhcmlhYmxlcwBTeXN0
ZW0uV2luZG93cy5Gb3Jtcy5WaXN1YWxTdHlsZXMATWVkaWFUeXBlTmFtZXMAZ2V0X1ZhbHVlcwBT
ZXR0aW5ncwBTVF9kM2NjYWYzNDMxYjI0MjUzOWM4YjcxNmYyNjUxMTgzMS5Nb2RlbHMAU1RfZDNj
Y2FmMzQzMWIyNDI1MzljOGI3MTZmMjY1MTE4MzEuVXRpbHMAU3lzdGVtLldpbmRvd3MuRm9ybXMA
Z2V0X0NvbHVtbnMAU3lzdGVtLkNvbGxlY3Rpb25zAGNvbnN1bHRhclJlZ2lzdHJvcwBnZXRfUGFy
YW1ldGVycwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfUm93cwBnZXRfS2V5cwBD
b25jYXQAU2VyaWFsaXplT2JqZWN0AERlc2VyaWFsaXplT2JqZWN0AGR0AERhdGFTZXQAZ2V0X0Rl
ZmF1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AFZpc3VhbFN0eWxlRWxlbWVudABnZXRfQ3VycmVu
dABnZXRfQ291bnQASnNvbkNvbnZlcnQAUmVxdWVzdABNb3ZlTmV4dABzZXRfQ29tbWFuZFRleHQA
RGF0YVJvdwBkYXRhUm93AEpBcnJheQBnZXRfQXNzZW1ibHkAb3BfRXF1YWxpdHkARW1wdHkAAAAA
AClVAHMAZQByADoAOgBjAG8AbgBlAHgAaQBvAG4ATwByAGkAZwBlAG4AACtVAHMAZQByADoAOgBj
AG8AbgBlAHgAaQBvAG4ARABlAHMAdABpAG4AbwAAC3QAYQBiAGwAYQAAD18AUABSAFUARQBCAEEA
AAtkAGEAdABvAHMAAAEABUYAQQAABUMAQgAAD0AAYQBjAGMAaQBvAG4AABlAAG4AbwBtAGIAcgBl
AFQAYQBiAGwAZQAAC0AAagBzAG8AbgAAAywAAAMnAAEFJwAsAAETQABjAG8AbAB1AG0AbgBhAHMA
ABFAAHYAYQBsAG8AcgBlAHMAAA9mAGkAbAB0AHIAbwBzAAANQAB0AGkAcABvAFUAABdAAGMAbwBk
AGkAZwBvAFQAaQBwAG8AABtAAG4AbwBtAGIAcgBlAFQAYQBiAGwAZQBVAABxUwBUAF8AZAAzAGMA
YwBhAGYAMwA0ADMAMQBiADIANAAyADUAMwA5AGMAOABiADcAMQA2AGYAMgA2ADUAMQAxADgAMwAx
AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAlcwBwAF8ATQBpAGcA
cgBhAGMAaQBvAG4AQwBvAGQAaQBnAG8AAC1zAHAAXwBSAGUAZwBpAHMAdAByAG8ATQBpAGcAcgBh
AGMAaQBvAG4ARgBhAAArcwBwAF8AUgBlAGcAaQBzAHQAcgBvAE0AaQBnAHIAYQBPAGwAZABGAGEA
AAMxAAADMgAAAzMAAAM0AAADNQAAA0kAAANVAAAFVQBDAAAAAAD9Pv5sN8+mSIMxfmyoy6IbAAQg
AQEIAyAAAQUgAQEREQQgAQEOBiABARGAnSAHFBJBEkESQRJBEkESQRJBEkESQRJBCAgICAgICAgI
CAUgABKArQUgABKAsQYgARKAtRwDIAAcAyAADgUgABKAvQMgAAgFIAESZQgOBwQVElECDhwSWRJd
EmEGFRJRAg4cBCAAEmUFIAASgMUEIAASWQUgARwSXQcgAgETABMBAyAAAgQAAQ4cGAcMDg4SWRJN
EmEVEmkBEm0OCA4OEkEScQUgABKAzQIGDgcVEoCpARIYBCABHAgFAAIODg4GAAESgIkOBSABEm0I
BSABEm0cCCAAFRJpARJtBhUSaQESbQQgABMABSACDggIBQACAg4OBAABAQ4FIAEBEnEGIAEBEYDl
BSAAEoDpBSACAQ4cCCABEoDtEoDtBiABARKA2QUgAQgSQS8HEw4ODhJZEk0SYRUSaQESbQ4OFRJR
Ag4OCA4OEkEScRURfQIODg4VEYCFAg4ODgYQAQEeAA4ICgEVElECDg4GFRJRAg4OCiAAFRJ5AhMA
EwEGFRJ5Ag4OCiAAFRF9AhMAEwEGFRF9Ag4OBgADDg4ODgsgABUSgIECEwATAQcVEoCBAg4OCyAA
FRGAhQITABMBBxURgIUCDg4EIAATAQcABA4ODg4OBCABDggjBxEODg4SgIkSgIkIElkSTRJhFRJp
ARJtEm0SbQgODhJBEnEIBwMSQRJxEkEGBwISQRJxCAABEoD1EYD5BSAAEoD9ByACAQ4SgP0It3pc
Vhk04IkIiYRdzYCAzJEIMK1P5rKmru0EAAAAAAQBAAAABAYSgJUEBhKAmQMGEhAHBhUSgKkBDgcG
FRKAqQEcAgYIAwYRHAUAAQ4STQYgAgESZQ4HIAMBEmUODgYgAhJBDg4HIAMSQQ4ODgUgAgEODgUA
ABKAlQUAABKAmQYAAQESgJkEAAASEAMAAAEIIAAVEoCpAQ4JIAEBFRKAqQEOCCAAFRKAqQEcCSAB
ARUSgKkBHAMoAA4FCAASgJUFCAASgJkECAASEAgoABUSgKkBDggoABUSgKkBHAgBAAgAAAAAAB4B
AAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfZDNjY2FmMzQzMWIy
NDI1MzljOGI3MTZmMjY1MTE4MzEAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyNAAASQEAGi5O
RVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZy
YW1ld29yayA0LjcAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVh
ZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tl
eVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VT
ZXQCAAAAAAAAAAAAAABQQURQQURQtAAAADxNAAAAAAAAAAAAAFZNAAAAIAAAAAAAAAAAAAAAAAAA
AAAAAAAAAABITQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACA
AAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAABoEAAAA
AAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAA
AQAwfnkjAAABADB+eSM/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBp
AGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6AwAA
AQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAAAAAa
AAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAA
AAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfAGQAMwBj
AGMAYQBmADMANAAzADEAYgAyADQAMgA1ADMAOQBjADgAYgA3ADEANgBmADIANgA1ADEAMQA4ADMA
MQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA5ADAAOAAxAC4AMwAy
ADMAMAA0AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGQAMwBjAGMA
YQBmADMANAAzADEAYgAyADQAMgA1ADMAOQBjADgAYgA3ADEANgBmADIANgA1ADEAMQA4ADMAMQAu
AGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkA
ZwBoAHQAIABAACAAIAAyADAAMgA0AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBr
AHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8A
ZAAzAGMAYwBhAGYAMwA0ADMAMQBiADIANAAyADUAMwA5AGMAOABiADcAMQA2AGYAMgA2ADUAMQAx
ADgAMwAxAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGQA
MwBjAGMAYQBmADMANAAzADEAYgAyADQAMgA1ADMAOQBjADgAYgA3ADEANgBmADIANgA1ADEAMQA4
ADMAMQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOQAwADgA
MQAuADMAMgAzADAANAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4AOQAwADgAMQAuADMAMgAzADAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAABoPQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="400"
            Column="21" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="111"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="487"
            Column="21" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="136"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="158"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="181"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="204"
            Column="13" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="193,42"
          Id="Package\Transferencia de Datos"
          TopLeft="314,154" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>