<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/28/2024 11:54:16 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-PJEIDUL"
  DTS:CreatorName="DESKTOP-PJEIDUL\Leonardo Mancero"
  DTS:DTSID="{C5ECAD1F-485A-43D3-AC9F-8B7580C2D69F}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.0"
  DTS:LocaleID="12298"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="157"
  DTS:VersionGUID="{572A9492-6DC6-4822-86B8-63ECC71EF988}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{93EB8763-83D6-4614-9DCA-0E7F200B9B6E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="conexionDestino">
      <DTS:VariableValue
        DTS:DataType="8">Server=192.168.1.100;Database=SEICOII;User Id=Integrity;Password=conalBa0608;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F5970596-9505-45EA-A6AF-2E6F85FD6866}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="conexionOrigen">
      <DTS:VariableValue
        DTS:DataType="8">Server=192.168.1.100;Database=SEICOII;User Id=Integrity;Password=conalBa0608;</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Transferencia de Datos"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{5BAAEFA1-60F3-4DE3-9FB3-AA7AE45CDE73}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Transferencia de Datos"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_d3ccaf3431b242539c8b716f26511831"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadWriteVariables="User::conexionDestino,User::conexionOrigen">
          <ProjectItem
            Name="Models\Request.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_d3ccaf3431b242539c8b716f26511831.Models
{
    public class Request
    {
        public string tabla { get; set; }
        public List<string> columnas { get; set; }
        public List<object> valor { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_d3ccaf3431b242539c8b716f26511831.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{6DEBB0CA-D366-45DF-807B-F7B6E42E2F10}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_d3ccaf3431b242539c8b716f26511831</RootNamespace>
    <AssemblyName>ST_d3ccaf3431b242539c8b716f26511831</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <HintPath>C:\Users\isc_2\AppData\Local\Temp\Vsta\SSIS_ST160\VstaHuJIOF4T5UqSqx7HMqY__w\packages\Newtonsoft.Json.13.0.3\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Models\Request.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Utils\stringHandler.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Entidades\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="13.0.3" targetFramework="net47" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3ccaf3431b242539c8b716f26511831.Properties.Settings.get_Default():ST_d3ccaf3431b242539c8b716f26511831.Properties.Sett" +
    "ings")]

namespace ST_d3ccaf3431b242539c8b716f26511831.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using ST_d3ccaf3431b242539c8b716f26511831.Utils;
using Newtonsoft.Json;
using System.Collections;
using ST_d3ccaf3431b242539c8b716f26511831.Models;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using System.Linq;
using static System.Net.Mime.MediaTypeNames;
#endregion

namespace ST_d3ccaf3431b242539c8b716f26511831
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        public string conexionOrigen { get; set; }
        public string conexionDestino { get; set; }

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {

            conexionOrigen = Dts.Variables["User::conexionOrigen"].Value.ToString();
            conexionDestino = Dts.Variables["User::conexionDestino"].Value.ToString();

            #region CODIGO1
            var consulta = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo1);
            if (consulta.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta.Tables.Count; i++)
                {
                    //InsertTables(consulta.Tables[i], stringHandler.accionRegistro.Trim());
                    InsertTablesV2000(consulta.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta = null;


            var consultaUp = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo1, stringHandler.DestinoUpdate);
            if (consultaUp.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo1);
                }
            }

            consultaUp = null;
            #endregion
            #region CODIGO2
            var consulta2 = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo2);
            if (consulta2.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta2.Tables.Count; i++)
                {
                    InsertTablesV2000(consulta2.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta2 = null;

            var consultaUp2 = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo2, stringHandler.DestinoUpdate);
            if (consultaUp2.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp2.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp2.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo2);                   
                }
            }
            consultaUp2 = null;
            #endregion
            #region CODIGO3
            var consulta3 = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo3);
            if (consulta3.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta3.Tables.Count; i++)
                {
                    InsertTablesV2000(consulta3.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta3 = null;

            var consultaUp3 = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo3, stringHandler.DestinoUpdate);
            if (consultaUp3.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp3.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp3.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo3);
                }
            }
            consultaUp3 = null;

            #endregion
            #region CODIGO4
            var consulta4 = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo4);
            if (consulta4.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta4.Tables.Count; i++)
                {
                    InsertTablesV2000(consulta4.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta4 = null;

            var consultaUp4 = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo4, stringHandler.DestinoUpdate);
            if (consultaUp4.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp4.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp4.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo4);
                }
            }
            consultaUp4 = null;

            #endregion
            #region CODIGO5
            var consulta5 = consultar(stringHandler.accionRegistro.Trim(), stringHandler.accionCodigo5);
            if (consulta5.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consulta5.Tables.Count; i++)
                {
                    InsertTablesV2000(consulta5.Tables[i], stringHandler.accionRegistro.Trim());
                }
            }

            consulta5 = null;

            var consultaUp5 = consultarRegistros(stringHandler.accionTipo, stringHandler.accionCodigo5, stringHandler.DestinoUpdate);
            if (consultaUp5.Tables.Count > 0)
            {
                for (global::System.Int32 i = 0; i < consultaUp5.Tables.Count; i++)
                {
                    UpdateTablesV2000(consultaUp5.Tables[i], stringHandler.DestinoUpdate, stringHandler.accionCodigo5);
                }
            }
            consultaUp5 = null;
            #endregion
        }

        public static string DataRowToJson(DataRow dataRow)
        {
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            foreach (DataColumn column in dataRow.Table.Columns)
            {
                dict[column.ColumnName] = dataRow[column];
            }

            return JsonConvert.SerializeObject(dict);
        }

        private void InsertTables(DataTable dt, string tipo)
        {
            try
            {
                if (dt.Rows.Count > 0)
                {
                    var jsonText = string.Empty;
                    List<Request> datosResponse = new List<Request>();

                    foreach (DataRow row in dt.Rows)
                    {
                        jsonText += row[0].ToString();
                    }

                    JArray jsonObject = JArray.Parse(jsonText);
                    var tabla = jsonObject[0];
                    var nombreTable = string.Empty;
                    nombreTable = tabla["tabla"].ToString();
                    nombreTable = nombreTable + "_PRUEBA";
                    var ArrayList = JArray.Parse(tabla["datos"].ToString());


                    foreach (var item in ArrayList)
                    {
                        var jsonSerializado = JsonConvert.SerializeObject(item);

                        var sinSegmento = 0;
                        string segmento = nombreTable.ToString();
                        var nombreSP = "";
                        segmento = segmento.Substring(0, 2).Trim();

                        switch (segmento)
                        {
                            case "FA":
                                nombreSP = stringHandler.sp_RegistroMigracionFa;
                                break;
                            case "CB":
                                Console.WriteLine("CB");
                                break;

                            default:
                                sinSegmento = 1;
                                break;
                        }

                        if (sinSegmento == 1)
                        {
                            continue;
                        }

                        SqlDataAdapter ad = new SqlDataAdapter();
                        DataSet ds = new DataSet();
                        SqlConnection Conexion = new SqlConnection(conexionDestino);
                        SqlCommand cmd = new SqlCommand();
                        Conexion.Open();
                        cmd.Connection = Conexion;
                        cmd.CommandText = nombreSP;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@accion", tipo));
                        cmd.Parameters.Add(new SqlParameter("@nombreTable", nombreTable));
                        cmd.Parameters.Add(new SqlParameter("@json", jsonSerializado));
                        ad = new SqlDataAdapter(cmd);
                        ad.Fill(ds);
                        Conexion.Close();
                    }

                }

            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message.ToString());
            }
        }


        private void InsertTablesV2000(DataTable dt, string accion)
        {
            try
            {
                if (dt.Rows.Count > 0)
                {
                    var jsonText = string.Empty;
                    List<Request> datosResponse = new List<Request>();

                    foreach (DataRow row in dt.Rows)
                    {
                        jsonText += row[0].ToString();
                    }

                    JArray jsonObject = JArray.Parse(jsonText);
                    var tabla = jsonObject[0];
                    var nombreTable = string.Empty;
                    var nombreTableI = string.Empty;
                    nombreTable = tabla["tabla"].ToString();
                    nombreTableI = nombreTable + "_PRUEBA";
                    var ArrayList = JArray.Parse(tabla["datos"].ToString());



                    foreach (var item in ArrayList)
                    {
                        string columnas = string.Empty;
                        string valor = string.Empty;

                        var jsonSerializado = JsonConvert.SerializeObject(item);
                        var des = JsonConvert.DeserializeObject<Dictionary<string, string>>(jsonSerializado);
                        foreach (var item1 in des.Keys)
                        {
                            columnas += $"{item1},";
                        }


                        foreach (var item2 in des.Values)
                        {
                            valor += $"'{item2}',";

                        }

                        var sinSegmento = 0;
                        string segmento = nombreTable.ToString();
                        var nombreSP = "";
                        segmento = segmento.Substring(0, 2).Trim();


                        nombreSP = stringHandler.sp_RegistroMigraOldFa;

                        //switch (segmento)
                        //{
                        //    case "FA":
                        //        nombreSP = stringHandler.sp_RegistroMigraOldFa;
                        //        break;
                        //    case "CB":
                        //        Console.WriteLine("CB");
                        //        break;

                        //    default:
                        //        sinSegmento = 1;
                        //        break;
                        //}

                        //if (sinSegmento == 1)
                        //{
                        //    continue;
                        //}


                        SqlDataAdapter ad = new SqlDataAdapter();
                        DataSet ds = new DataSet();
                        SqlConnection Conexion = new SqlConnection(conexionDestino);
                        SqlCommand cmd = new SqlCommand();
                        Conexion.Open();
                        cmd.Connection = Conexion;
                        cmd.CommandText = nombreSP;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@accion", accion));
                        cmd.Parameters.Add(new SqlParameter("@nombreTable", nombreTableI));
                        cmd.Parameters.Add(new SqlParameter("@columnas", columnas.Remove(columnas.Length - 1)));
                        cmd.Parameters.Add(new SqlParameter("@valores", valor.Remove(valor.Length - 1)));
                        ad = new SqlDataAdapter(cmd);
                        ad.Fill(ds);
                        Conexion.Close();
                    }

                    UpdateTableMigracion(accion, nombreTable);
                }

            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message.ToString());
            }

        }

        private void UpdateTablesV2000(DataTable dt, string accion, string codigoTipo)
        {

            try
            {
                if (dt.Rows.Count > 0)
                {
                    var jsonText = string.Empty;
                    List<Request> datosResponse = new List<Request>();

                    foreach (DataRow row in dt.Rows)
                    {
                        jsonText += row[0].ToString();
                    }

                    JArray jsonObject = JArray.Parse(jsonText);
                    var tabla = jsonObject[0];
                    var nombreTable = string.Empty;
                    var nombreTableI = string.Empty;
                    nombreTable = tabla["tabla"].ToString();
                    nombreTableI = nombreTable + "_PRUEBA";
                    var ArrayList = JArray.Parse(tabla["datos"].ToString());
                    var ArrayListFiltros = JArray.Parse(tabla["filtros"].ToString());

                    var seri = JsonConvert.SerializeObject(ArrayList);

                    int cont = 0;
                    foreach (var filtro in ArrayListFiltros)
                    {
                        var item = ArrayList[cont];  
                        

                        int sinSegmento = 0;
                        string segmento = nombreTable.ToString();
                        string nombreSP = string.Empty;
                        segmento = segmento.Substring(0, 2).Trim();
                        nombreSP = stringHandler.sp_RegistroMigraOldFa;

                        //switch (segmento)
                        //{
                        //    case "FA":
                        //        nombreSP = stringHandler.sp_RegistroMigraOldFa;
                        //        break;
                        //    case "CB":
                        //        Console.WriteLine("CB");
                        //        break;

                        //    default:
                        //        sinSegmento = 1;
                        //        break;
                        //}

                        //if (sinSegmento == 1)
                        //{
                        //    continue;
                        //}


                        SqlDataAdapter ad = new SqlDataAdapter();
                        DataSet ds = new DataSet();
                        SqlConnection Conexion = new SqlConnection(conexionDestino);
                        SqlCommand cmd = new SqlCommand();
                        Conexion.Open();
                        cmd.Connection = Conexion;
                        cmd.CommandText = nombreSP;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@accion", accion));
                        cmd.Parameters.Add(new SqlParameter("@nombreTable", nombreTable));
                        cmd.Parameters.Add(new SqlParameter("@columnas", item.ToString()));
                        cmd.Parameters.Add(new SqlParameter("@valores", filtro.ToString()));
                        ad = new SqlDataAdapter(cmd);
                        ad.Fill(ds);
                        Conexion.Close();
                        cont++;
                    }
                    UpdateTableMigracion(accion, nombreTable);
                }

            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message.ToString());
            }



            #region OLD
            //try
            //{
            //    //if (dt.Rows.Count > 0)
            //    //{
            //    //    var jsonText = string.Empty;
            //    //    List<Request> datosResponse = new List<Request>();

            //    //    foreach (DataRow row in dt.Rows)
            //    //    {
            //    //        jsonText += row[0].ToString();
            //    //    }

            //    //    JArray jsonObject = JArray.Parse(jsonText);
            //    //    var tabla = jsonObject[0];
            //    //    var nombreTable = string.Empty;
            //    //    nombreTable = tabla["tabla"].ToString();
            //    //    nombreTable = nombreTable + "_PRUEBA";
            //    //    var ArrayList = JArray.Parse(tabla["datos"].ToString());


            //    //    var dtR = consultarRegistros(accion, codigoTipo);
            //    //    string[] valorSplit = { };
            //    //    foreach (DataRow itemR in dtR.Tables[0].Rows)
            //    //    {
            //    //        var obs = itemR["observacion"].ToString();
            //    //        valorSplit = obs.Split(',');
            //    //    }


            //    //    foreach (var item in ArrayList)
            //    //    {
            //    //        string columnas = string.Empty;
            //    //        string valor = string.Empty;

            //    //        var jsonSerializado = JsonConvert.SerializeObject(item);

            //    //        foreach (string itemSplit in valorSplit)
            //    //        {
            //    //            JObject jsonObj = JObject.Parse(jsonSerializado);
            //    //            jsonObj.Remove(itemSplit.ToString());

            //    //        }

            //    //        //var des = JsonConvert.DeserializeObject<Dictionary<string, string>>(jsonSerializado);
            //    //        //        foreach (var item1 in des.Keys)
            //    //        //        {
            //    //        //            columnas += $"{item1},";
            //    //        //        }


            //    //        //        foreach (var item2 in des.Values)
            //    //        //        {
            //    //        //            valor += $"'{item2}',";

            //    //        //        }

            //    //        //        var sinSegmento = 0;
            //    //        //        string segmento = nombreTable.ToString();
            //    //        //        var nombreSP = "";
            //    //        //        segmento = segmento.Substring(0, 2).Trim();

            //    //        //        switch (segmento)
            //    //        //        {
            //    //        //            case "FA":
            //    //        //                nombreSP = stringHandler.sp_RegistroMigraOldFa;
            //    //        //                break;
            //    //        //            case "CB":
            //    //        //                Console.WriteLine("CB");
            //    //        //                break;

            //    //        //            default:
            //    //        //                sinSegmento = 1;
            //    //        //                break;
            //    //        //        }

            //    //        //        if (sinSegmento == 1)
            //    //        //        {
            //    //        //            continue;
            //    //        //        }


            //    //        //        SqlDataAdapter ad = new SqlDataAdapter();
            //    //        //        DataSet ds = new DataSet();
            //    //        //        SqlConnection Conexion = new SqlConnection(conexionDestino);
            //    //        //        SqlCommand cmd = new SqlCommand();
            //    //        //        Conexion.Open();
            //    //        //        cmd.Connection = Conexion;
            //    //        //        cmd.CommandText = nombreSP;
            //    //        //        cmd.CommandType = CommandType.StoredProcedure;
            //    //        //        cmd.Parameters.Add(new SqlParameter("@accion", accion));
            //    //        //        cmd.Parameters.Add(new SqlParameter("@nombreTable", nombreTable));
            //    //        //        cmd.Parameters.Add(new SqlParameter("@valores", valor.Remove(valor.Length - 1)));
            //    //        //        ad = new SqlDataAdapter(cmd);
            //    //        //        ad.Fill(ds);
            //    //        //        Conexion.Close();
            //    //    }


            //    //}

            //}
            //catch (Exception ex)
            //{

            //    throw new Exception(ex.Message.ToString());
            //}

            #endregion OLD
        }


        private DataSet consultar(string tipo, string accion)
        {
            DataTable dt = new DataTable();
            SqlDataAdapter ad = new SqlDataAdapter();
            DataSet ds = new DataSet();
            try
            {
                SqlConnection Conexion = new SqlConnection(conexionOrigen);
                SqlCommand cmd = new SqlCommand();
                Conexion.Open();
                cmd.Connection = Conexion;
                cmd.CommandText = stringHandler.sp_MigracionCodigo;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@accion", accion));
                cmd.Parameters.Add(new SqlParameter("@tipoU", tipo));
                ad = new SqlDataAdapter(cmd);
                ad.Fill(ds);
                Conexion.Close();
                return ds;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message.ToString());
            }
        }

        private DataSet consultarRegistros(string accion, string codigoTipo, string tipo)
        {
            DataTable dt = new DataTable();
            SqlDataAdapter ad = new SqlDataAdapter();
            DataSet ds = new DataSet();

            try
            {
                SqlConnection Conexion = new SqlConnection(conexionOrigen);
                SqlCommand cmd = new SqlCommand();
                Conexion.Open();
                cmd.Connection = Conexion;
                cmd.CommandText = stringHandler.sp_MigracionCodigo;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@accion", accion));
                cmd.Parameters.Add(new SqlParameter("@codigoTipo", codigoTipo));
                cmd.Parameters.Add(new SqlParameter("@tipoU", tipo));
                ad = new SqlDataAdapter(cmd);
                ad.Fill(ds);
                Conexion.Close();
                return ds;
            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message.ToString());
            }
        }

        private void UpdateTableMigracion( string tipo, string nombreTabla)
        {
            try
            {
                DataTable dt = new DataTable();
                SqlDataAdapter ad = new SqlDataAdapter();
                DataSet ds = new DataSet();
                try
                {
                    SqlConnection Conexion = new SqlConnection(conexionOrigen);
                    SqlCommand cmd = new SqlCommand();
                    Conexion.Open();
                    cmd.Connection = Conexion;
                    cmd.CommandText = stringHandler.sp_MigracionCodigo;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("@accion", stringHandler.accionModificaMigracion.Trim()));
                    cmd.Parameters.Add(new SqlParameter("@tipoU", tipo.Trim()));
                    cmd.Parameters.Add(new SqlParameter("@nombreTableU", nombreTabla.Trim()));
                    ad = new SqlDataAdapter(cmd);
                    ad.Fill(ds);
                    Conexion.Close();
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message.ToString());
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3ccaf3431b242539c8b716f26511831.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3ccaf3431b242539c8b716f26511831.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3ccaf3431b242539c8b716f26511831.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_d3ccaf3431b242539c8b716f26511831.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_d3ccaf3431b242539c8b716f26511831.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_d3ccaf3431b242539c8b716f26511831</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_d3ccaf3431b242539c8b716f26511831</msb:DisplayName>
    <msb:ProjectId>{BA1F454B-14F4-4E93-BD48-77B5C89127F7}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_d3ccaf3431b242539c8b716f26511831.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Models\Request.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Utils\stringHandler.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="packages.config" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_d3ccaf3431b242539c8b716f26511831")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_d3ccaf3431b242539c8b716f26511831")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Utils\stringHandler.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace ST_d3ccaf3431b242539c8b716f26511831.Utils
{
    public static class stringHandler
    {
        internal static string sp_MigracionCodigo = "sp_MigracionCodigo";
        internal static string sp_RegistroMigracionFa = "sp_RegistroMigracionFa";
        internal static string sp_RegistroMigraOldFa = "sp_RegistroMigraOldFa";
        internal static string accionCodigo1 = "1";
        internal static string accionCodigo2 = "2";
        internal static string accionCodigo3 = "3";
        internal static string accionCodigo4 = "4";
        internal static string accionCodigo5 = "5";
        internal static string accionRegistro = "I";
        internal static string accionModificaMigracion = "U";     
        internal static string DestinoUpdate = "U";     
        internal static string accionTipo = "UC";     

    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_d3ccaf3431b242539c8b716f26511831.dll">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
CjoE////3gwRBywHEQdvIgAACtwCBAcoDAAABt4Qbz8AAApvFAAACnNAAAAKeioAQUwAAAIAAAAq
AAAALwAAAFkAAAAVAAAAAAAAAAIAAADdAAAAAwEAAOABAAAMAAAAAAAAAAAAAAAAAAAA9gEAAPYB
AAAQAAAAHQAAARswBACYAAAABgAAEXNOAAAKJnMxAAAKJnMyAAAKCgIoAQAABnMzAAAKC3M0AAAK
B281AAAKJQdvNgAACiV+BgAABG83AAAKJRpvOAAACiVvOQAACnKNAABwBHM6AAAKbzsAAAomJW85
AAAKcgcBAHADczoAAApvOwAACiZzPAAACgZvPQAACiYHbz4AAAoGDN4Qbz8AAApvFAAACnNAAAAK
eggqARAAAAAAEgB0hgAQHQAAARswBACvAAAABgAAEXNOAAAKJnMxAAAKJnMyAAAKCgIoAQAABnMz
AAAKC3M0AAAKB281AAAKJQdvNgAACiV+BgAABG83AAAKJRpvOAAACiVvOQAACnKNAABwA3M6AAAK
bzsAAAomJW85AAAKchUBAHAEczoAAApvOwAACiYlbzkAAApyBwEAcAVzOgAACm87AAAKJnM8AAAK
Bm89AAAKJgdvPgAACgYM3hBvPwAACm8UAAAKc0AAAAp6CCoAARAAAAAAEgCLnQAQHQAAARswBADE
AAAABwAAEXNOAAAKJnMxAAAKJnMyAAAKCgIoAQAABnMzAAAKC3M0AAAKB281AAAKJQdvNgAACiV+
BgAABG83AAAKJRpvOAAACiVvOQAACnKNAABwfg8AAARvFQAACnM6AAAKbzsAAAomJW85AAAKcgcB
AHADbxUAAApzOgAACm87AAAKJiVvOQAACnItAQBwBG8VAAAKczoAAApvOwAACiZzPAAACgZvPQAA
CiYHbz4AAAreEG8/AAAKbxQAAApzQAAACnreAyb+GioBHAAAAAASAJyuABAdAAABAAAAAMDAAAMd
AAABHgIoTwAACioeAihQAAAKKq5+AwAABC0eckkBAHDQAwAAAihRAAAKb1IAAApzUwAACoADAAAE
fgMAAAQqGn4EAAAEKh4CgAQAAAQqGn4FAAAEKh4CKFQAAAoqLnMTAAAGgAUAAAQqAAATMAEAeQAA
AAAAAAByuwEAcIAGAAAEcuEBAHCABwAABHIPAgBwgAgAAARyOwIAcIAJAAAEcj8CAHCACgAABHJD
AgBwgAsAAARyRwIAcIAMAAAEcksCAHCADQAABHJPAgBwgA4AAARyUwIAcIAPAAAEclMCAHCAEAAA
BHJXAgBwgBEAAAQqHgJ7EgAABCoiAgN9EgAABCoeAnsTAAAEKiICA30TAAAEKh4CexQAAAQqIgID
fRQAAAQqQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAABAkAACN+AABwCQAA1AsA
ACNTdHJpbmdzAAAAAEQVAABgAgAAI1VTAKQXAAAQAAAAI0dVSUQAAAC0FwAA0AMAACNCbG9iAAAA
AAAAAAIAAAFXHaIJCQsAAAD6ATMAFgAAAQAAAD8AAAAHAAAAFwAAABwAAAAVAAAAVAAAAAIAAAAf
AAAABwAAAAQAAAAIAAAADgAAAAgAAAABAAAABwAAAAEAAAABAAAAAQAAAAAA2AUBAAAAAAAGAGwE
9wgGAPsE9wgGALgD5AgPAGsJAAAGAOUD2gYGAE8E2gYGADAE2gYGAOIE2gYGAIwE2gYGAKUE2gYG
APwD2gYGABcEMAUKAMAEhwUKAPoChwUGAIAD9wgOABsLLgESAEULzwkWAPEJgAIOAJsLLgEGAGwA
QwEGABELFwYGAKMIigoOAHEGLgEGADkCFwYOACYCLgEGAEkAQwEaAFoGMggOAHgHLwsGAIYHFwZT
AE4HAAB7ALIIAABTAAAHAACDALIIAAAaAKsLMggGACMGFwYGAJsD5AgGAFUIFwkGAMEHxQYWAGsD
wgUWAMwDwgUWADEDsAYGAFcAQwEKALAFhwUeAMUJkAIeADACkAIGAEwFFwYOAOwGLgEOABYDLgEO
ABAHLgEaAG4LowcOADwHLgEGAGkCFwYOAIAILwsOAPUBLwsOAGsHkAcOAOsBkAcOAL4CLgEOACUH
LwsOAHMILwsOAIMIkAcGAMUCFwYGAEUCFwYGALYL2gYAAAAAsQAAAAAAAQABAAEAEABmBiUAOQAB
AAEAAAAQAB4JeglVAAMADgAAARAACwp6CaUABQASAIEBEABlCD8KVQAGABUAAQAQAHoLFApVABIA
FgADAQAAzwoAAI0AFQAdAAEAeQHEAAEAmQHEABEAKAZWAhEA6gJbAhEAAAJgAhMAzQfEABMA9wDE
ABMA4QDEABMAXgDEABMAeQDEABMAhwDEABMAlQDEABMAowDEABMAIwjEABMAfAbEABMAXQPEABMA
CAjEAAEAYgHEAAEA0QFkAgEAugFsAgYG2QB0AlaAvwp3AlaAygJ3AlAgAAAAAIYINAZUAAEAWCAA
AAAAhghHBhAAAQBhIAAAAACGCOAHVAACAGkgAAAAAIYI9AcQAAIAdCAAAAAAhgBsBgYAAwCMJAAA
AACWALMHewIDAAQlAAAAAIEAtAmBAgQASCcAAAAAgQATAIECBgBcKgAAAACBAAEAiAIIALwsAAAA
AIEARwiQAgsAcC0AAAAAgQCdCpcCDQA8LgAAAACBAJQGnwIQACgvAAAAAIYYvQgGABIAMC8AAAAA
gxi9CAYAEgA4LwAAAACTCFEIpQISAGQvAAAAAJMI0gKrAhIAay8AAAAAkwjeArECEgBzLwAAAACW
CCMLuAITAHovAAAAAIYYvQgGABMAgi8AAAAAkRjDCL0CEwCQLwAAAACRGMMIvQITABUwAAAAAIYI
GgFUABMAHTAAAAAAhggkARAAEwAmMAAAAACGCMoIwQIUAC4wAAAAAIYI1wjKAhQANzAAAAAAhgiP
CNQCFQA/MAAAAACGCJkI3QIVADAvAAAAAIYYvQgGABYAAAABACMFAAABACMFAAABAKMLAAABABgL
AAACAB4IAAABABgLAAACAKkGAAABABgLAAACAKkGAAADABMIAAABAB4IAAACAKkGAAABAKkGAAAC
ABMIAAADAB4IAAABAB4IAAACAA4BAAABACMFAAABACMFAAABACMFAAABACMFCQC9CAEAEQC9CAYA
GQC9CAoAKQC9CBAAMQC9CBAAOQC9CBAAQQC9CBAASQC9CBAAUQC9CBAAWQC9CBAAYQC9CBAAaQC9
CAYAeQC9CAYAIQG9CAYAQQG9CBUAcQDHCj0AWQHBCUMAYQEFBkkAaQEZBVAAqQBKBVQAcQEeBlQA
gQCpCVgAgQFkC14AeQEFBmIADAC9CAYAmQAcAn4AyQB+CoMAgQGvCIkAsQBYC1AAuQBxAlQAmQAF
Bo4ADAAOBpQAsQCCC5wAwQBPAwYAkQH2CqAAyQDdCr4AcQHLC8QAFAC9CAYAmQAFBs8AcQHvCtQA
EQFXA9oAEQEFBuEA2QAFBucAEQGvCO0AHABYC/0AcQFTBQIBcQG/CwgBoQGwAg4BqQG9CAYAgQC9
CAYA4QC9CBAAsQG9CAYAuQFhBgYAsQFcBxMBwQGLCxAAwQG6AhkBsQGwCiAB2QG9CCYB0QFeASwB
qQG9CDUB4QEABjwBuQFJAwYA6QAQAlQA6QC9CBAAkQEGC3ABJADmCocBLACvCJkBNABYC/0AcQHv
CqsBNACCC5wAJAAACrIBPACvCMYBRABYC9oBcQHvCt8BRACCC5wAcQFdBV4AcQEpBecByQC9CAYA
cQC9CAYAqQC9CAYA6QFXAhoC6QGyCyMCKQG9CCkCSQG9CAYACABYAEwCCABcAFECIABrAFECIQBr
AFECLgALAA4DLgATABcDLgAbADYDLgAjAD8DLgArAGgDLgAzAGgDLgA7AGgDLgBDAD8DLgBLAG4D
LgBTAGgDLgBbAIUDQABrAFECQQBrAFECQwBjAFECYABrAFECYwBzAFECaQB7ADYDgABrAFECiQB7
ADYDoQBrAFECQQJrAFECYQJrAFECgQJrAFECwAJrAFEC4AJrAFECAANrAFECIANrAFECQANrAFEC
YANrAFECHABoAKUAQgHsAQoCEwICAAEAAwADAAQABQAGAAYAAABLBucCAAD4B+cCAABVCOsCAADy
AvECAAAnC/cCAAAoAecCAADbCPwCAACdCAUDAgABAAMAAQACAAMAAgADAAUAAQAEAAUAAgAPAAcA
AgAQAAkAAQARAAkAAgASAAsAAgAWAA0AAQAXAA0AAgAYAA8AAQAZAA8AAgAaABEAAQAbABEAdwDH
APYAgAGSAaQBvgHSAQSAAAABAAAAeiPDfgAAAAAAACUAAAAEAAAAAAAAAAAAAAAxAjoBAAAAABAA
AAAAAAAAAAAAADoCaAUAAAAABAAAAAAAAAAAAAAAMQIuAQAAAAAEAAAAAAAAAAAAAAAxAmkKAAAA
AAQAAAAAAAAAAAAAADECFwYAAAAADQAAAAAAAAAAAAAAQwKjBwAAAAAQAAAAAAAAAAAAAAA6AroA
AAAAAAAAAAABAAAAKAkAAAcAAgCDAHcBAAAAAABVcGRhdGVUYWJsZXNWMjAwMABJbnNlcnRUYWJs
ZXNWMjAwMABTVF9kM2NjYWYzNDMxYjI0MjUzOWM4YjcxNmYyNjUxMTgzMQBJRW51bWVyYXRvcmAx
AExpc3RgMQBhY2Npb25Db2RpZ28xAERpY3Rpb25hcnlgMgBhY2Npb25Db2RpZ28yAGFjY2lvbkNv
ZGlnbzMAYWNjaW9uQ29kaWdvNABhY2Npb25Db2RpZ281ADxNb2R1bGU+AE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAHNwX1JlZ2lzdHJvTWlncmFPbGRGYQBzcF9SZWdpc3Ry
b01pZ3JhY2lvbkZhAG5vbWJyZVRhYmxhAGdldF90YWJsYQBzZXRfdGFibGEAU3lzdGVtLkRhdGEA
bXNjb3JsaWIAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAQWRkADx0YWJsYT5rX19CYWNraW5n
RmllbGQAPGNvbmV4aW9uT3JpZ2VuPmtfX0JhY2tpbmdGaWVsZAA8Y29uZXhpb25EZXN0aW5vPmtf
X0JhY2tpbmdGaWVsZAA8dmFsb3I+a19fQmFja2luZ0ZpZWxkADxjb2x1bW5hcz5rX19CYWNraW5n
RmllbGQARGJDb21tYW5kAFNxbENvbW1hbmQAZGVmYXVsdEluc3RhbmNlAGdldF9NZXNzYWdlAGdl
dF9UYWJsZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUA
R2V0VHlwZUZyb21IYW5kbGUAQ29uc29sZQBnZXRfQ29sdW1uTmFtZQBTeXN0ZW0uTmV0Lk1pbWUA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBXcml0ZUxpbmUAc2V0X0NvbW1hbmRUeXBl
AEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNj
cmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERhdGFDb2xsZWN0aW9uQmFzZQBBcHBsaWNhdGlv
blNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAFBhcnNlAERlc3Rpbm9VcGRhdGUARWRpdG9yQnJv
d3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29k
ZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBB
c3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZy
YW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlE
ZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2Vt
Ymx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0
VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVD
b21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBSZW1vdmUAU3lzdGVtLlJ1bnRp
bWUuVmVyc2lvbmluZwBUb1N0cmluZwBTdWJzdHJpbmcAZ2V0X0xlbmd0aABNaWNyb3NvZnQuU3Fs
U2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFz
awBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfZDNjY2FmMzQzMWIy
NDI1MzljOGI3MTZmMjY1MTE4MzEuZGxsAEZpbGwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lzdGVtAFRy
aW0ARW51bQByZXNvdXJjZU1hbgBnZXRfY29uZXhpb25PcmlnZW4Ac2V0X2NvbmV4aW9uT3JpZ2Vu
AEpUb2tlbgBPcGVuAFNjcmlwdE1haW4ARGF0YUNvbHVtbgBhY2Npb25Nb2RpZmljYU1pZ3JhY2lv
bgBVcGRhdGVUYWJsZU1pZ3JhY2lvbgBhY2Npb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVt
Lkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YVRhYmxlQ29sbGVjdGlvbgBWYWx1
ZUNvbGxlY3Rpb24ARGF0YUNvbHVtbkNvbGxlY3Rpb24AU3FsUGFyYW1ldGVyQ29sbGVjdGlvbgBE
YXRhUm93Q29sbGVjdGlvbgBLZXlDb2xsZWN0aW9uAHNldF9Db25uZWN0aW9uAERiQ29ubmVjdGlv
bgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24ATmV3dG9uc29mdC5K
c29uAERhdGFSb3dUb0pzb24AQ3VsdHVyZUluZm8Ac3BfTWlncmFjaW9uQ29kaWdvAGdldF9jb25l
eGlvbkRlc3Rpbm8Ac2V0X2NvbmV4aW9uRGVzdGlubwBhY2Npb25UaXBvAGNvZGlnb1RpcG8AdGlw
bwBhY2Npb25SZWdpc3RybwBOZXd0b25zb2Z0Lkpzb24uTGlucQBjb25zdWx0YXIAZ2V0X1Jlc291
cmNlTWFuYWdlcgBzdHJpbmdIYW5kbGVyAFNxbFBhcmFtZXRlcgBTcWxEYXRhQWRhcHRlcgBnZXRf
dmFsb3IAc2V0X3ZhbG9yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAGdl
dF9jb2x1bW5hcwBzZXRfY29sdW1uYXMAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1l
LkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9kM2NjYWYzNDMxYjI0MjUzOWM4
YjcxNmYyNjUxMTgzMS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9k
ZXMAU1RfZDNjY2FmMzQzMWIyNDI1MzljOGI3MTZmMjY1MTE4MzEuUHJvcGVydGllcwBnZXRfVGFi
bGVzAEluc2VydFRhYmxlcwBnZXRfVmFyaWFibGVzAFN5c3RlbS5XaW5kb3dzLkZvcm1zLlZpc3Vh
bFN0eWxlcwBNZWRpYVR5cGVOYW1lcwBnZXRfVmFsdWVzAFNldHRpbmdzAFNUX2QzY2NhZjM0MzFi
MjQyNTM5YzhiNzE2ZjI2NTExODMxLk1vZGVscwBTVF9kM2NjYWYzNDMxYjI0MjUzOWM4YjcxNmYy
NjUxMTgzMS5VdGlscwBTeXN0ZW0uV2luZG93cy5Gb3JtcwBnZXRfQ29sdW1ucwBTeXN0ZW0uQ29s
bGVjdGlvbnMAY29uc3VsdGFyUmVnaXN0cm9zAGdldF9QYXJhbWV0ZXJzAFN1Y2Nlc3MAZ2V0X0R0
cwBTY3JpcHRSZXN1bHRzAGdldF9Sb3dzAGdldF9LZXlzAENvbmNhdABTZXJpYWxpemVPYmplY3QA
RGVzZXJpYWxpemVPYmplY3QAZHQARGF0YVNldABnZXRfRGVmYXVsdABTeXN0ZW0uRGF0YS5TcWxD
bGllbnQAVmlzdWFsU3R5bGVFbGVtZW50AGdldF9DdXJyZW50AGdldF9Db3VudABKc29uQ29udmVy
dABSZXF1ZXN0AE1vdmVOZXh0AHNldF9Db21tYW5kVGV4dABEYXRhUm93AGRhdGFSb3cASkFycmF5
AGdldF9Bc3NlbWJseQBvcF9FcXVhbGl0eQBFbXB0eQAAAAAAKVUAcwBlAHIAOgA6AGMAbwBuAGUA
eABpAG8AbgBPAHIAaQBnAGUAbgAAK1UAcwBlAHIAOgA6AGMAbwBuAGUAeABpAG8AbgBEAGUAcwB0
AGkAbgBvAAALdABhAGIAbABhAAAPXwBQAFIAVQBFAEIAQQAAC2QAYQB0AG8AcwAAAQAFRgBBAAAF
QwBCAAAPQABhAGMAYwBpAG8AbgAAGUAAbgBvAG0AYgByAGUAVABhAGIAbABlAAALQABqAHMAbwBu
AAADLAAAAycAAQUnACwAARNAAGMAbwBsAHUAbQBuAGEAcwAAEUAAdgBhAGwAbwByAGUAcwAAD2YA
aQBsAHQAcgBvAHMAAA1AAHQAaQBwAG8AVQAAF0AAYwBvAGQAaQBnAG8AVABpAHAAbwAAG0AAbgBv
AG0AYgByAGUAVABhAGIAbABlAFUAAHFTAFQAXwBkADMAYwBjAGEAZgAzADQAMwAxAGIAMgA0ADIA
NQAzADkAYwA4AGIANwAxADYAZgAyADYANQAxADEAOAAzADEALgBQAHIAbwBwAGUAcgB0AGkAZQBz
AC4AUgBlAHMAbwB1AHIAYwBlAHMAACVzAHAAXwBNAGkAZwByAGEAYwBpAG8AbgBDAG8AZABpAGcA
bwAALXMAcABfAFIAZQBnAGkAcwB0AHIAbwBNAGkAZwByAGEAYwBpAG8AbgBGAGEAACtzAHAAXwBS
AGUAZwBpAHMAdAByAG8ATQBpAGcAcgBhAE8AbABkAEYAYQAAAzEAAAMyAAADMwAAAzQAAAM1AAAD
SQAAA1UAAAVVAEMAAAAAAA7XHBueLc5Aieg6rMWSfTwABCABAQgDIAABBSABARERBCABAQ4GIAEB
EYCdIAcUEkESQRJBEkESQRJBEkESQRJBEkEICAgICAgICAgIBSAAEoCtBSAAEoCxBiABEoC1HAMg
ABwDIAAOBSAAEoC9AyAACAUgARJlCA4HBBUSUQIOHBJZEl0SYQYVElECDhwEIAASZQUgABKAxQQg
ABJZBSABHBJdByACARMAEwEDIAACBAABDhwYBwwODhJZEk0SYRUSaQESbQ4IDg4SQRJxBSAAEoDN
AgYOBxUSgKkBEhgEIAEcCAUAAg4ODgYAARKAiQ4FIAESbQgFIAESbRwIIAAVEmkBEm0GFRJpARJt
BCAAEwAFIAIOCAgFAAICDg4EAAEBDgUgAQEScQYgAQERgOUFIAASgOkFIAIBDhwIIAESgO0SgO0G
IAEBEoDZBSABCBJBLQcRDg4OElkSTRJhFRJpARJtDg4VElECDg4OEkEScRURfQIODg4VEYCFAg4O
DgYQAQEeAA4ICgEVElECDg4GFRJRAg4OCiAAFRJ5AhMAEwEGFRJ5Ag4OCiAAFRF9AhMAEwEGFRF9
Ag4OBgADDg4ODgsgABUSgIECEwATAQcVEoCBAg4OCyAAFRGAhQITABMBBxURgIUCDg4EIAATAQcA
BA4ODg4OBCABDggdBw0ODhKAiQgSWRJNEmEVEmkBEm0SbRJtDhJBEnEIBwMSQRJxEkEGBwISQRJx
CAABEoD1EYD5BSAAEoD9ByACAQ4SgP0It3pcVhk04IkIiYRdzYCAzJEIMK1P5rKmru0EAAAAAAQB
AAAABAYSgJUEBhKAmQMGEhAHBhUSgKkBDgcGFRKAqQEcAgYIAwYRHAUAAQ4STQYgAgESZQ4HIAMB
EmUODgYgAhJBDg4HIAMSQQ4ODgUgAgEODgUAABKAlQUAABKAmQYAAQESgJkEAAASEAMAAAEIIAAV
EoCpAQ4JIAEBFRKAqQEOCCAAFRKAqQEcCSABARUSgKkBHAMoAA4FCAASgJUFCAASgJkECAASEAgo
ABUSgKkBDggoABUSgKkBHAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEI
AQACAAAAAAAoAQAjU1RfZDNjY2FmMzQzMWIyNDI1MzljOGI3MTZmMjY1MTE4MzEAAAUBAAAAABYB
ABFDb3B5cmlnaHQgQCAgMjAyNAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRG
cmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAtAAAAM7K774BAAAAkQAAAGxT
eXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4w
LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVt
LlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAKxMAAAA
AAAAAAAAAMZMAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4TAAAAAAAAAAAAAAAAF9Db3JEbGxN
YWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACA
AAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAABoEAAAA
AAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAA
AQDDfnojAAABAMN+eiM/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBp
AGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6AwAA
AQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAAAAAa
AAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAA
AAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfAGQAMwBj
AGMAYQBmADMANAAzADEAYgAyADQAMgA1ADMAOQBjADgAYgA3ADEANgBmADIANgA1ADEAMQA4ADMA
MQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA5ADAAOAAyAC4AMwAy
ADQANQAxAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGQAMwBjAGMA
YQBmADMANAAzADEAYgAyADQAMgA1ADMAOQBjADgAYgA3ADEANgBmADIANgA1ADEAMQA4ADMAMQAu
AGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkA
ZwBoAHQAIABAACAAIAAyADAAMgA0AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBr
AHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8A
ZAAzAGMAYwBhAGYAMwA0ADMAMQBiADIANAAyADUAMwA5AGMAOABiADcAMQA2AGYAMgA2ADUAMQAx
ADgAMwAxAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGQA
MwBjAGMAYQBmADMANAAzADEAYgAyADQAMgA1ADMAOQBjADgAYgA3ADEANgBmADIANgA1ADEAMQA4
ADMAMQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOQAwADgA
MgAuADMAMgA0ADUAMQAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4AOQAwADgAMgAuADMAMgA0ADUAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADYPAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="193,42"
          Id="Package\Transferencia de Datos"
          TopLeft="315,154" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>